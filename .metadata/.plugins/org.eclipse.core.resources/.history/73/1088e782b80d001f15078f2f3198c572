package com.example.nagoyameshi.controller;

import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.nagoyameshi.entity.Role;
import com.example.nagoyameshi.entity.User;
import com.example.nagoyameshi.form.UserConfirmForm;
import com.example.nagoyameshi.form.UserEditForm;
import com.example.nagoyameshi.repository.FavoriteRepository;
import com.example.nagoyameshi.repository.ReservationRepository;
import com.example.nagoyameshi.repository.ReviewRepository;
import com.example.nagoyameshi.repository.RoleRepository;
import com.example.nagoyameshi.repository.UserRepository;
import com.example.nagoyameshi.repository.VerificationTokenRepository;
import com.example.nagoyameshi.security.UserDetailsImpl;
import com.example.nagoyameshi.service.StripeUserService;
import com.example.nagoyameshi.service.UserService;

import jakarta.servlet.http.HttpServletRequest;

@Controller
@RequestMapping("/users")
public class UserController {
	private final UserRepository userRepository;
	private final UserService userService;
	private final StripeUserService stripeUserService;
	private final ReservationRepository reservationRepository;
	private final ReviewRepository reviewRepository;
	private final RoleRepository roleRepository;

	public UserController(UserRepository userRepository, UserService userService,
			StripeUserService stripeUserService,
			ReservationRepository reservationRepository,
			ReviewRepository reviewRepository, RoleRepository roleRepository) {
		this.userRepository = userRepository;
		this.userService = userService;
		this.stripeUserService = stripeUserService;
		this.reservationRepository = reservationRepository;
		this.reviewRepository = reviewRepository;
		this.roleRepository = roleRepository;
	}

	@GetMapping
	public String index(@AuthenticationPrincipal UserDetailsImpl userDetailsImpl, Model model) {
		User user = userRepository.getReferenceById(userDetailsImpl.getUser().getId());

		model.addAttribute("user", user);

		return "users/index";
	}

	@GetMapping("/edit")
	public String edit(@AuthenticationPrincipal UserDetailsImpl userDetailsImpl, Model model) {
		User user = userRepository.getReferenceById(userDetailsImpl.getUser().getId());
		UserEditForm userEditForm = new UserEditForm(user.getId(), user.getName(), user.getFurigana(), user.getAge(),
				user.getPostalCode(), user.getAddress(), user.getEmail(), user.getJob(), user.getRole().getId());

		model.addAttribute("userEditForm", userEditForm);

		return "users/edit";
	}

	@GetMapping("/edit/input")
	public String input(@ModelAttribute @Validated UserEditForm userEditForm, BindingResult bindingResult,
			RedirectAttributes redirectAttributes) {

		if (bindingResult.hasErrors()) {
			return "users/edit";
		}

		redirectAttributes.addFlashAttribute("userEditForm", userEditForm);

		return "redirect:/users/edit/confirm";
	}

	@GetMapping("/edit/confirm")
	public String confirm(@AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
			@ModelAttribute UserEditForm userEditForm, HttpServletRequest httpServletRequest,
			Model model) {

		User user = userDetailsImpl.getUser();
		Role roleId = roleRepository.getReferenceById(user.getRole().getId());

		UserConfirmForm userConfirmForm = new UserConfirmForm(userEditForm.getId(), userEditForm.getName(),
				userEditForm.getFurigana(),
				userEditForm.getAge(), userEditForm.getPostalCode(), userEditForm.getAddress(), userEditForm.getEmail(),
				userEditForm.getJob(),
				userEditForm.getRoleId());

		if (userConfirmForm.getRoleId() == 2) {
			String sessionId = stripeUserService.createStripeSession(userConfirmForm, httpServletRequest);
			model.addAttribute("sessionId", sessionId);
		}

		model.addAttribute("user", user);
		model.addAttribute("roleId", roleId);
		model.addAttribute("userConfirmForm", userConfirmForm);

		return "users/confirm";
	}

	@PostMapping("/update")
	public String update(@ModelAttribute @Validated UserConfirmForm userConfirmForm, BindingResult bindingResult,
			RedirectAttributes redirectAttributes) {
		//		メールアドレスが変更されておりかつ登録済みであればBindingRsultオブジェクトにエラー内容を追加
		if (userService.isEmailChanged(userConfirmForm) && userService.isEmailRegistered(userConfirmForm.getEmail())) {
			FieldError fieldError = new FieldError(bindingResult.getObjectName(), "email", "既に登録済みのメールアドレスです。");
			bindingResult.addError(fieldError);
		}

		if (bindingResult.hasErrors()) {
			return "users/edit";
		}

		userService.update(userConfirmForm);
		redirectAttributes.addFlashAttribute("successMessage", "会員情報を編集しました。");

		return "redirect:/users";
	}

	@PostMapping("/delete")
	public String delete(@AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
			RedirectAttributes redirectAttributes) {

		User user = userDetailsImpl.getUser();

		userService.dropForeignKeyFromReservations();
		userService.dropForeignKeyFromReviews();

		reservationRepository.deleteByUser_id(user);
		reviewRepository.deleteByUser_id(user);

		Integer userId = user.getId();
		userRepository.deleteById(userId);

		redirectAttributes.addFlashAttribute("successMessage", "退会しました。");

		return "redirect:/";

	}

}
