package com.example.nagoyameshi.controller;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.nagoyameshi.entity.Favorite;
import com.example.nagoyameshi.entity.Review;
import com.example.nagoyameshi.entity.Store;
import com.example.nagoyameshi.entity.User;
import com.example.nagoyameshi.form.ReservationRegisterForm;
import com.example.nagoyameshi.repository.FavoriteRepository;
import com.example.nagoyameshi.repository.ReviewRepository;
import com.example.nagoyameshi.repository.StoreRepository;
import com.example.nagoyameshi.security.UserDetailsImpl;
import com.example.nagoyameshi.service.FavoriteService;

@Controller
@RequestMapping("/stores")
public class StoreController {
	private final StoreRepository storeRepository;
	private final FavoriteRepository favoriteRepository;
	private final FavoriteService favoriteService;
	private final ReviewRepository reviewRepository;

	public StoreController(StoreRepository storeRepository, FavoriteRepository favoriteRepository,
			FavoriteService favoriteService, ReviewRepository reviewRepository) {
		this.storeRepository = storeRepository;
		this.favoriteRepository = favoriteRepository;
		this.favoriteService = favoriteService;
		this.reviewRepository = reviewRepository;
	}

	@GetMapping
	public String index(@RequestParam(name = "keyword", required = false) String keyword,
			@RequestParam(name = "category", required = false) String category,
			@PageableDefault(page = 0, size = 10, sort = "id", direction = Direction.ASC) Pageable pageable,
			Model model) {
		Page<Store> storePage;

		if (keyword != null && !keyword.isEmpty()) {
			storePage = storeRepository.findByNameLikeOrCategory_SubNameLike("%" + keyword + "%", "%" + keyword + "%",
					pageable);
		} else if (category != null && !category.isEmpty()) {
			storePage = storeRepository.findByCategory_SubNameLike("%" + category + "%", pageable);
		} else {
			storePage = storeRepository.findAll(pageable);
		}

		Map<Integer, Double> averageScores = new LinkedHashMap<>();

		for (Store store : storePage) {
			Double averageScore = reviewRepository.findAverageScoreByStore(store);
			if (averageScore != null) {
				averageScores.put(store.getId(), averageScore);
			}
		}

		model.addAttribute("averageScores", averageScores);
		model.addAttribute("storePage", storePage);
		model.addAttribute("keyword", keyword);
		model.addAttribute("category", category);

		return "stores/index";
	}

	@GetMapping("/{id}")
	public String show(@PathVariable(name = "id") Integer id, Model model,
			@AuthenticationPrincipal UserDetailsImpl userDetailsImpl) {
		Store store = storeRepository.getReferenceById(id);
		Favorite favorite = null;
		boolean userFavorited = false;

		if (userDetailsImpl != null) {
			User user = userDetailsImpl.getUser();
			userFavorited = favoriteService.favoriteJudge(store, user);

			if (userFavorited) {
				favorite = favoriteRepository.findByStoreAndUser(store, user);
			}

		}

		List<Review> reviewList = reviewRepository.findByStore(store);
		Double averageScore = reviewRepository.findAverageScoreByStore(store);

		model.addAttribute("averageScore", averageScore);
		model.addAttribute("reviewList", reviewList);
		model.addAttribute("store", store);
		model.addAttribute("reservationRegisterForm", new ReservationRegisterForm());
		model.addAttribute("userFavorited", userFavorited);
		model.addAttribute("favorite", favorite);

		return "stores/show";

	}

}