package com.example.nagoyameshi.service;

import java.util.Map;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.nagoyameshi.entity.Role;
import com.example.nagoyameshi.entity.User;
import com.example.nagoyameshi.form.SignupForm;
import com.example.nagoyameshi.repository.RoleRepository;
import com.example.nagoyameshi.repository.UserRepository;

import jakarta.servlet.http.HttpServletRequest;

@Service
public class AuthService {
	private final UserRepository userRepository;
	private final RoleRepository roleRepository;
	private final UserService userService;

	public AuthService(UserRepository userRepository, RoleRepository roleRepository, UserService userService) {
		this.userRepository = userRepository;
		this.roleRepository = roleRepository;
		this.userService = userService;
	}

	@Transactional
	public void create(Map<String, String> paymentIntentObject) {
		User user = new User();
		Integer roleId = Integer.valueOf(paymentIntentObject.get("roleId"));

		String name = paymentIntentObject.get("name");
		String furigana = paymentIntentObject.get("furigana");
		Integer age = Integer.valueOf(paymentIntentObject.get("age"));
		String postalCode = paymentIntentObject.get("postalCode");
		String address = paymentIntentObject.get("address");
		String email = paymentIntentObject.get("email");
		String job = paymentIntentObject.get("job");
		String password = paymentIntentObject.get("password");
		Role role = roleRepository.getReferenceById(roleId);

		user.setName(name);
		user.setFurigana(furigana);
		user.setAge(age);
		user.setPostalCode(postalCode);
		user.setAddress(address);
		user.setEmail(email);
		user.setJob(job);
		user.setPassword(password);
		user.setRole(role);
		user.setEnabled(true);

		userRepository.save(user);

	}

	public String signup(@ModelAttribute @Validated SignupForm signupForm, BindingResult bindingResult,
			RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest) {
		//		メールアドレスが登録済みであれば、BindingResultオブジェクトにエラーの内容を追加する
		if (userService.isEmailRegistered(signupForm.getEmail())) {
			FieldError fieldError = new FieldError(bindingResult.getObjectName(), "email", "既に登録済みのメールアドレスです。");
			bindingResult.addError(fieldError);
		}

		//		パスワードとパスワード（確認用）の入力値が一致しなければBindingResultオブジェクトにエラー内容を追加
		if (!userService.isSamePassword(signupForm.getPassword(), signupForm.getPasswordConfirmation())) {
			FieldError fieldError = new FieldError(bindingResult.getObjectName(), "password", "パスワードが一致しません。");
			bindingResult.addError(fieldError);
		}

		if (bindingResult.hasErrors()) {
			return "auth/signup";
		}

		User createdUser = userService.create(signupForm);
		String requestUrl = new String(httpServletRequest.getRequestURL());
		signupEventPublisher.publishSignupEvent(createdUser, requestUrl);
		redirectAttributes.addFlashAttribute("successMessage",
				"ご入力いただいたメールアドレスに認証メールを送信いたしました。メールに記載されているリンクをクリックし、会員登録を完了してください。");

		return "redirect:/";
	}

}
